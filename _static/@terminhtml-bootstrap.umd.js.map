{"version":3,"file":"@terminhtml-bootstrap.umd.js","sources":["../src/bootstrap.ts","../src/index.ts"],"sourcesContent":["const terminHTMLMajorVersion = 1;\nconst terminHTMLUrl = `https://unpkg.com/terminhtml@${terminHTMLMajorVersion}.x/dist/`;\nconst terminHTMLJSUrl = `${terminHTMLUrl}terminhtml.es.js`;\nconst termynalCSSUrl = `${terminHTMLUrl}src/termynal.css`;\n\nimport type { TerminHTML } from \"terminhtml\";\n\nexport type BootstrapOptions = {\n  class: string;\n};\n\nexport type BootstrapResult = {\n  stopListener(): void;\n  terminHTMLs: TerminHTML[];\n};\n\nconst defaultClass = \"terminhtml\";\nconst defaultOptions: BootstrapOptions = {\n  class: defaultClass,\n};\n\nexport function bootstrapTerminHTMLsOnWindowLoad(\n  options?: Partial<BootstrapOptions>\n): void {\n  window.addEventListener(\"load\", () => {\n    bootstrapTerminHTMLs(options).catch(console.error);\n  });\n}\n\nexport async function bootstrapTerminHTMLs(\n  options?: Partial<BootstrapOptions>\n): Promise<BootstrapResult> {\n  loadTerminHTMLCSS();\n\n  const opts: BootstrapOptions = { ...defaultOptions, ...options };\n  const className = opts.class;\n  return await createTerminHTMLs(className);\n}\n\nasync function createTerminHTMLs(className: string): Promise<BootstrapResult> {\n  // Dynamically load the latest major version of terminhtml-js, so that we can\n  // update end users by only updating terminhtml-js.\n  const TerminHTML = await import(\n    /* @vite-ignore */\n    terminHTMLJSUrl\n  );\n  const elements = document.querySelectorAll<HTMLElement>(`.${className}`);\n  const terminHTMLs: TerminHTML[] = [];\n  for (const element of elements) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    const terminHTML: TerminHTML = new TerminHTML.TerminHTML(element);\n    terminHTMLs.push(terminHTML);\n  }\n  let unloadedTerms = [...terminHTMLs];\n\n  function loadVisibleTermynals() {\n    unloadedTerms = unloadedTerms.filter(term => {\n      if (term.container.getBoundingClientRect().top - innerHeight <= 0) {\n        term.init();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  window.addEventListener(\"scroll\", loadVisibleTermynals);\n  const stopListener = () =>\n    window.removeEventListener(\"scroll\", loadVisibleTermynals);\n  setTimeout(loadVisibleTermynals, 50);\n  return { stopListener, terminHTMLs };\n}\n\nconst cssId = \"terminhtml-styles\";\n\nfunction loadTerminHTMLCSS() {\n  if (!document.getElementById(cssId)) {\n    const head = document.getElementsByTagName(\"head\")[0];\n    const link = document.createElement(\"link\");\n    link.id = cssId;\n    link.rel = \"stylesheet\";\n    link.type = \"text/css\";\n    link.href = termynalCSSUrl;\n    link.media = \"all\";\n    head.appendChild(link);\n  }\n}\n","import { bootstrapTerminHTMLsOnWindowLoad } from './bootstrap';\n\nbootstrapTerminHTMLsOnWindowLoad();\n"],"names":[],"mappings":"obACA,KAAM,GAAgB,gCAAgC,YAChD,EAAkB,GAAG,oBACrB,EAAiB,GAAG,oBAcpB,EAAmC,CACvC,MAFmB,YAGrB,EAEO,WACL,EACM,CACC,OAAA,iBAAiB,OAAQ,IAAM,CACpC,EAAqB,CAAO,EAAE,MAAM,QAAQ,KAAK,CAAA,CAClD,CACH,CAEA,iBACE,EAC0B,CACR,IAGlB,KAAM,GAAY,AADa,OAAK,GAAmB,GAChC,MAChB,MAAA,MAAM,GAAkB,CAAS,CAC1C,CAEA,iBAAiC,EAA6C,CAG5E,KAAM,GAAa,KAAM,QAEvB,GAEI,EAAW,SAAS,iBAA8B,IAAI,GAAW,EACjE,EAA4B,CAAA,EAClC,SAAW,KAAW,GAAU,CAE9B,KAAM,GAAyB,GAAI,GAAW,WAAW,CAAO,EAChE,EAAY,KAAK,CAAU,CAC7B,CACI,GAAA,GAAgB,CAAC,GAAG,CAAW,EAEH,YAAA,CACd,EAAA,EAAc,OAAO,AAAQ,GACvC,EAAK,UAAU,sBAAwB,EAAA,IAAM,aAAe,EAC9D,GAAK,KAAK,EACH,IAEF,EACR,CACH,CAEO,OAAA,iBAAiB,SAAU,CAAoB,EACtD,KAAM,GAAe,IACnB,OAAO,oBAAoB,SAAU,CAAoB,EAC3D,kBAAW,EAAsB,EAAE,EAC5B,CAAE,eAAc,cACzB,CAEA,KAAM,GAAQ,oBAEd,YAA6B,CAC3B,GAAI,CAAC,SAAS,eAAe,CAAK,EAAG,CACnC,KAAM,GAAO,SAAS,qBAAqB,MAAM,EAAE,GAC7C,EAAO,SAAS,cAAc,MAAM,EAC1C,EAAK,GAAK,EACV,EAAK,IAAM,aACX,EAAK,KAAO,WACZ,EAAK,KAAO,EACZ,EAAK,MAAQ,MACb,EAAK,YAAY,CAAI,CACvB,CACF,CCnFA,EAAiC"}